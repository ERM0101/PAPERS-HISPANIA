//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HispaniaComptabilitat.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HispaniaComptabilitatEntities : DbContext
    {
        public HispaniaComptabilitatEntities()
            : base("name=HispaniaComptabilitatEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<LocalConnection> LocalConnections { get; set; }
        public virtual DbSet<Lock> Locks { get; set; }
        public virtual DbSet<PostalCode> PostalCodes { get; set; }
        public virtual DbSet<BillingSerie> BillingSeries { get; set; }
        public virtual DbSet<SendType> SendTypes { get; set; }
        public virtual DbSet<EffectType> EffectTypes { get; set; }
        public virtual DbSet<AddressStore> AddressStores { get; set; }
        public virtual DbSet<Good> Goods { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<HistoCumulativeCustomer> HistoCumulativeCustomers { get; set; }
        public virtual DbSet<HistoGood> HistoGoods { get; set; }
        public virtual DbSet<PriceRange> PriceRanges { get; set; }
        public virtual DbSet<Parameter> Parameters { get; set; }
        public virtual DbSet<DeliveryNote> DeliveryNotes { get; set; }
        public virtual DbSet<CustomerOrderMovement> CustomerOrderMovements { get; set; }
        public virtual DbSet<WarehouseMovement> WarehouseMovements { get; set; }
        public virtual DbSet<QueryCustom> QueryCustoms { get; set; }
        public virtual DbSet<IVAType> IVATypes { get; set; }
        public virtual DbSet<BadDebtMovement> BadDebtMovements { get; set; }
        public virtual DbSet<BadDebt> BadDebts { get; set; }
        public virtual DbSet<Bill> Bills { get; set; }
        public virtual DbSet<HistoCustomer> HistoCustomers { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<Provider> Providers { get; set; }
        public virtual DbSet<Agent> Agents { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<RelatedCustomer> RelatedCustomers { get; set; }
        public virtual DbSet<CustomerOrder> CustomerOrders { get; set; }
    
        public virtual ObjectResult<Revisio> SP_Revisions(Nullable<int> operation_Type)
        {
            var operation_TypeParameter = operation_Type.HasValue ?
                new ObjectParameter("Operation_Type", operation_Type) :
                new ObjectParameter("Operation_Type", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Revisio>("SP_Revisions", operation_TypeParameter);
        }
    
        public virtual ObjectResult<DeliveryNoteLine> SP_DeliveryNoteLines()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryNoteLine>("SP_DeliveryNoteLines");
        }
    
        public virtual ObjectResult<InputOutput> SP_InputsOutputs(Nullable<int> good_Id)
        {
            var good_IdParameter = good_Id.HasValue ?
                new ObjectParameter("Good_Id", good_Id) :
                new ObjectParameter("Good_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InputOutput>("SP_InputsOutputs", good_IdParameter);
        }
    
        public virtual ObjectResult<StockTaking> SP_StockTaking(string good_Id_From, string good_Id_Until)
        {
            var good_Id_FromParameter = good_Id_From != null ?
                new ObjectParameter("Good_Id_From", good_Id_From) :
                new ObjectParameter("Good_Id_From", typeof(string));
    
            var good_Id_UntilParameter = good_Id_Until != null ?
                new ObjectParameter("Good_Id_Until", good_Id_Until) :
                new ObjectParameter("Good_Id_Until", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockTaking>("SP_StockTaking", good_Id_FromParameter, good_Id_UntilParameter);
        }
    
        public virtual ObjectResult<DiaryBandage> SP_DiaryBandages(string bill_Id_From, string bill_Id_Until, Nullable<decimal> year_Query)
        {
            var bill_Id_FromParameter = bill_Id_From != null ?
                new ObjectParameter("Bill_Id_From", bill_Id_From) :
                new ObjectParameter("Bill_Id_From", typeof(string));
    
            var bill_Id_UntilParameter = bill_Id_Until != null ?
                new ObjectParameter("Bill_Id_Until", bill_Id_Until) :
                new ObjectParameter("Bill_Id_Until", typeof(string));
    
            var year_QueryParameter = year_Query.HasValue ?
                new ObjectParameter("Year_Query", year_Query) :
                new ObjectParameter("Year_Query", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DiaryBandage>("SP_DiaryBandages", bill_Id_FromParameter, bill_Id_UntilParameter, year_QueryParameter);
        }
    
        public virtual ObjectResult<CustomerSale> SP_CustomerSales(Nullable<decimal> upper_Limit_Sales)
        {
            var upper_Limit_SalesParameter = upper_Limit_Sales.HasValue ?
                new ObjectParameter("Upper_Limit_Sales", upper_Limit_Sales) :
                new ObjectParameter("Upper_Limit_Sales", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerSale>("SP_CustomerSales", upper_Limit_SalesParameter);
        }
    
        public virtual ObjectResult<Unpaid> SP_Unpaids(Nullable<int> agent_Id, string bill_Id_From, string bill_Id_Until)
        {
            var agent_IdParameter = agent_Id.HasValue ?
                new ObjectParameter("Agent_Id", agent_Id) :
                new ObjectParameter("Agent_Id", typeof(int));
    
            var bill_Id_FromParameter = bill_Id_From != null ?
                new ObjectParameter("Bill_Id_From", bill_Id_From) :
                new ObjectParameter("Bill_Id_From", typeof(string));
    
            var bill_Id_UntilParameter = bill_Id_Until != null ?
                new ObjectParameter("Bill_Id_Until", bill_Id_Until) :
                new ObjectParameter("Bill_Id_Until", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Unpaid>("SP_Unpaids", agent_IdParameter, bill_Id_FromParameter, bill_Id_UntilParameter);
        }
    
        public virtual ObjectResult<Settlement> SP_Settlements(Nullable<int> agent_Id, string bill_Id_From, string bill_Id_Until, Nullable<decimal> year_Query)
        {
            var agent_IdParameter = agent_Id.HasValue ?
                new ObjectParameter("Agent_Id", agent_Id) :
                new ObjectParameter("Agent_Id", typeof(int));
    
            var bill_Id_FromParameter = bill_Id_From != null ?
                new ObjectParameter("Bill_Id_From", bill_Id_From) :
                new ObjectParameter("Bill_Id_From", typeof(string));
    
            var bill_Id_UntilParameter = bill_Id_Until != null ?
                new ObjectParameter("Bill_Id_Until", bill_Id_Until) :
                new ObjectParameter("Bill_Id_Until", typeof(string));
    
            var year_QueryParameter = year_Query.HasValue ?
                new ObjectParameter("Year_Query", year_Query) :
                new ObjectParameter("Year_Query", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Settlement>("SP_Settlements", agent_IdParameter, bill_Id_FromParameter, bill_Id_UntilParameter, year_QueryParameter);
        }
    
        public virtual ObjectResult<LastBillSetteled> SP_LastBillSetteleds()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LastBillSetteled>("SP_LastBillSetteleds");
        }
    
        public virtual int SP_HistoricAcumCustomers(Nullable<int> data_Year)
        {
            var data_YearParameter = data_Year.HasValue ?
                new ObjectParameter("Data_Year", data_Year) :
                new ObjectParameter("Data_Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_HistoricAcumCustomers", data_YearParameter);
        }
    
        public virtual int SP_HistoricAcumGoods(Nullable<int> data_Year)
        {
            var data_YearParameter = data_Year.HasValue ?
                new ObjectParameter("Data_Year", data_Year) :
                new ObjectParameter("Data_Year", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_HistoricAcumGoods", data_YearParameter);
        }
    
        public virtual int SP_RemoveWarehouseMovements()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_RemoveWarehouseMovements");
        }
    
        public virtual ObjectResult<LiniesConforme> SP_LiniesConformes(Nullable<int> customerOrder_Id)
        {
            var customerOrder_IdParameter = customerOrder_Id.HasValue ?
                new ObjectParameter("CustomerOrder_Id", customerOrder_Id) :
                new ObjectParameter("CustomerOrder_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LiniesConforme>("SP_LiniesConformes", customerOrder_IdParameter);
        }
    
        public virtual ObjectResult<CustomerOrderMovementsComment> SP_CustomerOrderMovementsComments(Nullable<int> customerOrder_Id)
        {
            var customerOrder_IdParameter = customerOrder_Id.HasValue ?
                new ObjectParameter("CustomerOrder_Id", customerOrder_Id) :
                new ObjectParameter("CustomerOrder_Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerOrderMovementsComment>("SP_CustomerOrderMovementsComments", customerOrder_IdParameter);
        }
    
        public virtual ObjectResult<Ranges_Result1> Ranges(string good_Id_From, string good_Id_Until, string bill_Id_From, string bill_Id_Until, Nullable<decimal> year_Query)
        {
            var good_Id_FromParameter = good_Id_From != null ?
                new ObjectParameter("Good_Id_From", good_Id_From) :
                new ObjectParameter("Good_Id_From", typeof(string));
    
            var good_Id_UntilParameter = good_Id_Until != null ?
                new ObjectParameter("Good_Id_Until", good_Id_Until) :
                new ObjectParameter("Good_Id_Until", typeof(string));
    
            var bill_Id_FromParameter = bill_Id_From != null ?
                new ObjectParameter("Bill_Id_From", bill_Id_From) :
                new ObjectParameter("Bill_Id_From", typeof(string));
    
            var bill_Id_UntilParameter = bill_Id_Until != null ?
                new ObjectParameter("Bill_Id_Until", bill_Id_Until) :
                new ObjectParameter("Bill_Id_Until", typeof(string));
    
            var year_QueryParameter = year_Query.HasValue ?
                new ObjectParameter("Year_Query", year_Query) :
                new ObjectParameter("Year_Query", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ranges_Result1>("Ranges", good_Id_FromParameter, good_Id_UntilParameter, bill_Id_FromParameter, bill_Id_UntilParameter, year_QueryParameter);
        }
    
        public virtual ObjectResult<Range> SP_Ranges(string good_Id_From, string good_Id_Until, string bill_Id_From, string bill_Id_Until, Nullable<decimal> year_Query)
        {
            var good_Id_FromParameter = good_Id_From != null ?
                new ObjectParameter("Good_Id_From", good_Id_From) :
                new ObjectParameter("Good_Id_From", typeof(string));
    
            var good_Id_UntilParameter = good_Id_Until != null ?
                new ObjectParameter("Good_Id_Until", good_Id_Until) :
                new ObjectParameter("Good_Id_Until", typeof(string));
    
            var bill_Id_FromParameter = bill_Id_From != null ?
                new ObjectParameter("Bill_Id_From", bill_Id_From) :
                new ObjectParameter("Bill_Id_From", typeof(string));
    
            var bill_Id_UntilParameter = bill_Id_Until != null ?
                new ObjectParameter("Bill_Id_Until", bill_Id_Until) :
                new ObjectParameter("Bill_Id_Until", typeof(string));
    
            var year_QueryParameter = year_Query.HasValue ?
                new ObjectParameter("Year_Query", year_Query) :
                new ObjectParameter("Year_Query", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Range>("SP_Ranges", good_Id_FromParameter, good_Id_UntilParameter, bill_Id_FromParameter, bill_Id_UntilParameter, year_QueryParameter);
        }
    }
}
